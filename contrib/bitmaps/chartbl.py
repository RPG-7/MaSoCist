#!/usr/bin/python

import struct
import sys

rgbformat = "BBB"
CHAR_WIDTH = 4
CHAR_HEIGHT = 8

context = {
	'nrows' : 0,
	'ncols' : 0,
	'width' : 0,
	'height' : 0,
}


def rgbto565(r, g, b):
	return (( (r & 0xf8) ) | ((g & 0xe0) >> 5),
		( (g & 0x1c) << 3 ) | ((b & 0xf8) >> 3))

def rgbto332(r, g, b):
	return (r & 0xe0) | ((g & 0xe0) >> 3) | ((b & 0xc0) >> 6)


def gentbl():
	c = 0
	a = ""
	for i in range(32, 127):
		a += "%c" % chr(i)
		c += 1
		if c == 16:
			c = 0
			a = ""


def output_chr(context, out, data, offset):
	width = context['width']
	for i in range(CHAR_HEIGHT):
		off = offset + i * width
		for j in range(CHAR_WIDTH):
			o = 3 * (off + j)
			r, g, b = struct.unpack(rgbformat, data[o:o + 3])
			rgb565 = rgbto565(r, g, b)
			out += chr(rgb565[0])
			out += chr(rgb565[1])
	return out

def output_chr8(context, out, data, offset):
	width = context['width']
	for i in range(CHAR_HEIGHT):
		off = offset + i * width
		for j in range(CHAR_WIDTH):
			o = 3 * (off + j)
			r, g, b = struct.unpack(rgbformat, data[o:o + 3])
			out += chr(rgbto332(r, g, b))

	return out

def convert2table(context, data, compressed = 0):
	out = ""
	width = context['width']
	if compressed:
		output = output_chr8
	else:
		output = output_chr

	for i in xrange(context['nrows']):
		off = i * CHAR_HEIGHT * width
		for j in xrange(context['ncols']):
			o = off + j * CHAR_WIDTH
			out = output(context, out, data, o)
	return out

def convert_short(f, data):
	l = len(data) / 2
	c = 0
	for i in xrange(l):
		o = 2 * i
		rgb565 = struct.unpack(">H", data[o:o + 2])
		f.write("0x%04x," % rgb565)
		c += 1
		if c == 8:
			f.write("\n")
			c = 0

def convert_char(f, data):
	l = len(data)
	c = 0
	for i in xrange(l):
		f.write("0x%02x," % ord(data[i]))
		c += 1
		if c == 8:
			f.write("\n")
			c = 0
	

def readpnm(context, prefix):
	pnm = open(prefix, "r")

	d = pnm.readline()
	d = pnm.readline()
	l = pnm.readline()
	a, b = l.split()
	x, y = int(a), int(b)
	a = pnm.readline()

	l = x * y
	context['width'] = x
	context['height'] = y
	context['ncols'] = x / CHAR_WIDTH
	context['nrows'] = y / CHAR_HEIGHT

	data = pnm.read()
	pnm.close()

	return data
	
def convert2raw(context, data):

	out = ""
	l = len(data) / 3
	for i in xrange(l):
		off = 3 * i
		r, g, b = struct.unpack(rgbformat, data[off:off + 3])
		rgb565 = rgbto565(r, g, b)
		out += chr(rgb565[0])
		out += chr(rgb565[1])

	return out

def get_basename(name):
	return name[:name.rindex(".")]

# gentbl()
c = {}

out = readpnm(c, sys.argv[2])

if sys.argv[1] == '-b':
	out = convert2table(c, out, 0)
	basename = get_basename(sys.argv[2])
	f = open(basename + ".bin", "w")
	f.write(out)
elif sys.argv[1] == '-r':
	out = convert2raw(c, out)
	basename = get_basename(sys.argv[2])
	outfile = sys.argv[3]
	f = open(outfile, "w")
	try:
		varname = basename[basename.rindex("/")+1:]
	except ValueError:
		varname = basename
	f.write("""/* Image data %s
 *  Generated by chartbl.py from %s.pnm
 *  Changes to this file will be lost
 */
	
""" % (basename, basename))
	f.write("""
#ifndef SECTION_ATTRIBUTE
#define SECTION_ATTRIBUTE
#endif

""")
	f.write("SECTION_ATTRIBUTE const unsigned short g_%s[] = {\n" % varname)
	out = convert_short(f, out)
	f.write("};\n");

elif sys.argv[1][:2] == '-c':
	if len(sys.argv[1]) == 3 and sys.argv[1][2] == '8':
		compressed = 1
	else:
		compressed = 0
	out = convert2table(c, out, compressed)
	basename = get_basename(sys.argv[2])
	outfile = sys.argv[3]
	f = open(outfile, "w")
	f.write("""/* Character table %s (c) hackfin@section5.ch
 *  Generated by chartbl.py from %s.pnm
 *  Changes to this file will be lost
 */
	
""" % (basename, basename))
	f.write("""
#ifndef SECTION_ATTRIBUTE
#define SECTION_ATTRIBUTE
#endif

""")
	if compressed:
		f.write("SECTION_ATTRIBUTE const unsigned char g_%s_c[] = {\n" % varname)
		out = convert_char(f, out)
	else:
		f.write("SECTION_ATTRIBUTE const unsigned short g_%s[] = {\n" % varname)
		out = convert_short(f, out)
	f.write("};\n");
else:
	raise ValueError, "Unknown option"

f.close()
