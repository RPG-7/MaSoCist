<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="sec_cpucores">
  <title>CPU cores</title>

  <para>Several CPU cores have been developed for or integrated into the
  MaSoCist build environment.</para>

  <section>
    <title>ZPU small core 'Zealot'</title>

    <para>The Zealot core is a non-pipelined CPU, designed by Salvador E.
    Tropea, based on the 'ZPU small' design by Ã˜yvind Harboe. It is enhanced
    by a In Circuit Emulation module (proprietary in house standard "StdTAP")
    for native JTAG debugging on FPGA hardware. The HDL for this CPU is
    OpenSource.</para>

    <para>This CPU variant is a full 32 bit CPU, not allowing unaligned
    access, therefore uses 32 bit addressing on a 4 byte for I/O access only.
    It is also enhanced by a small WishBone wrapper to access externally
    supplied IP cores (I2C, UART). The Zealot core has limited possibilities
    for customization.</para>

    <para>The ZPU interrupts are non-reentrant, i.e. only one interrupt
    service at a time is processed.</para>
  </section>

  <section>
    <title>ZPUng core</title>

    <para>The ZPUng ('ng' standing for 'next generation') core is a pipelined
    proprietary redesign of the original ZPU architecture in the Python HDL
    extension <application>MyHDL</application>. A short overview:</para>

    <itemizedlist>
      <listitem>
        <para>Instruction compatible to the ZPU small, big endian</para>
      </listitem>

      <listitem>
        <para>Three stage pipeline with shortcut mechanisms for some
        instruction sequences</para>
      </listitem>

      <listitem>
        <para>Separate Stack and Data/Program memory</para>
      </listitem>

      <listitem>
        <para>Typical native instruction duration: 1 cycle (up to 3 cycles on
        I/O and ALU operations)</para>
      </listitem>

      <listitem>
        <para>Enhanced interrupt, exception and event vector capabilities
        (ZPUng v1)</para>
      </listitem>

      <listitem>
        <para>Extended StdTAP debugging features</para>
      </listitem>

      <listitem>
        <para>Slightly higher logic usage than ZPU small</para>
      </listitem>

      <listitem>
        <para>Easily configureable and extendable using custom microcode
        extensions (ZPUng v2)</para>
      </listitem>
    </itemizedlist>

    <para>The ZPUng code is primarely available in VHDL under a custom source
    license. Verilog output can be supported on request.</para>

    <para>The ZPUng v1 minimum configuration typically synthesizes in less
    than 800 LUTs (including debug logic), depending on architecture.</para>

    <para>The ZPUng v2 is still under development and offers higher speed,
    however it breaks compatibility to ZPUng v1 with respect to microcode
    emulation features. Also it can be configured to use a different opcode
    set. Custom operations can be implemented such that some processing is
    occuring in parallel, but still within a calleable function, accessible to
    an application programmer. The main ZPU machine code is still compatible
    to the classic ZPU variants. Interrupt and debugging functionality on the
    ZPUng v2 are yet limited.</para>
  </section>

  <section>
    <title>PyPS core</title>

    <para>The PyPS core (section5 proprietary, written in Python) is a
    reconfigureable processor design based on a classic RISC architecture
    design with a few specific optimizations with regards to Block RAM. It
    runs up to 100 MHz on Spartan6 platforms ('emil' configuration) with a
    distributed register file.</para>

    <itemizedlist>
      <listitem>
        <para>RISC-V instruction set compatible (rv32ui tests passing)</para>
      </listitem>

      <listitem>
        <para>Configureable CSR functionality</para>
      </listitem>

      <listitem>
        <para>Four/Five (shortcut) pipeline stages with hazard
        prevention</para>
      </listitem>

      <listitem>
        <para>StdTAP debugging interface with simplified
        In-Circuit-Emulation</para>
      </listitem>

      <listitem>
        <para>DMA coprocessor option (two simultaneous memory channels)</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>The legacy PyPS core MIPS compatibility is dropped in favor of the
      stable RISC-V rv32ui architecture</para>
    </note>

    <para>The specific RISC-V 32 bit variant is also referred to as
    <productname>pyrv32</productname> in the MaSoCist configuration. Renaming
    in progress...</para>
  </section>

  <section>
    <title>neo430 - MSP430 compatible</title>

    <para>As a proof of concept, the neo430 processor from Stefan Nolting was
    slightly modified and integrated into the opensource MaSoCist
    distribution. For more information on the processor architecture, please
    see <ulink
    url="https://github.com/stnolting/neo430">https://github.com/stnolting/neo430</ulink>.</para>

    <para>Note that this is a 16 bit processor, thus some functionality
    depending on 32 bit peripheral registers is not supported (no Ethernet
    networking, for example).</para>

    <note>
      <para>Support for neo430 is experimental only, no extensive tests were
      made</para>
    </note>
  </section>
</section>
