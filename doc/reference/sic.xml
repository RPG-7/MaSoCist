<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="sec_sic">
  <title>System interrupt controller</title>

  <para>The system interrupt controller (SIC) is a very simple IRQ controller
  handling up to four channels using the registers listed in <xref
  linkend="tbl_regmap_sic"/></para>

  <para>Up to four interrupt sources can be mapped to the channels with a
  simple prioritized IRQ vector generation.</para>

  <para><xi:include href="../device_properties.xml" xpointer="tbl_regmap_sic"
  xmlns:xi="http://www.w3.org/2001/XInclude"/></para>

  <section>
    <title>SICv2 exceptions</title>

    <para>The v2 of the SIC has an extra NMI pin plus an EV0 exception vector
    register. When the NMI pin is asserted, this overrides all pending
    interrupts and sends an interrupt signal to the CPU. No other interrupts
    can trigger an event until the condition causing the NMI to be set is
    cleared.</para>

    <para>The cause of the exception is not known to the SIC. Instead, it is
    up to the CPU designer to implement exception cause registers in the
    SysCtrl map.</para>

    <para>Since exceptions are non-reentrant, the programmer must ensure that
    no other exception occurs inside an exception handler. Likewise, it can be
    problematic if exceptions occur inside interrupt routines that can
    interrupt a running exception handler. If the exception handler clears the
    exception cause too early, interrupts causing another exception will
    likely trash the stack.</para>

    <note>
      <para>The ZPUng v1.1 prohibits stack trashing within an exception
      handler and does not allow reentrancy until a IUNLK opcode is
      executed.</para>
    </note>
  </section>

  <section>
    <title>Interrupt handling</title>

    <para>When a '1' level occurs on an interrupt source, the corresponding
    bit in the SIC_ILAT register is set. The corresponding bit in the
    SIC_IMASK register determines, whether the interrupt triggers an IRQ
    request to the core. If the SIC_IMASK bit is set, the corresponding
    SIC_ILAT bit will be latched into SIC_IPEND and the CPU will receive a
    pulse on the IRQ line. The interrupt vector is generated by the SIC
    according to the SIC_IAR register.</para>

    <para>By default, each interrupt source [0..n-1] is assigned to the
    corresponding channel [0..n-1] where n is the maximum number of channels
    (four in this fixed implementation). Channels with lower numbers have
    higher priority. The channel assignment can be changed by setting the
    corresponding bit field in the SIC_IAR register.</para>

    <para>The user must initialize the interrupt vectors in SIC_IVx to the IRQ
    handlers before enabling the interrupts using the SIC_IMASK
    register.</para>
  </section>

  <section>
    <title>Channel assignment</title>

    <figure floatstyle="H">
      <title>SIC_IAR register</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="img/reg_SIC_IAR.pdf"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para><xref linkend="fig_channel_assignment"/> shows the connection scheme
    used by the SIC_IAR register. S[0..3] denote the IRQ sources, C[0..3] the
    IRQ channels. If S0 is supposed to trigger an IRQ on lowest priority C3, a
    value of 3 needs to be written to the SIC_IRQCH0_SEL bit field. This
    mapping is effective after all latching and masking logic.</para>

    <figure id="fig_channel_assignment">
      <title>Channel assignment scheme</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="img/irq_assignment.pdf"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>If several interrupt sources are assigned to the same channel, they
    are technically ORed. The developer needs to determine the event source
    according to the SIC_ILAT register in the irq handler corresponding to the
    assigned channel.</para>

    <note>
      <para>When using a Zealot CPU core, the SIC_IVx settings will be
      ignored, due to only one global interrupt routine support
      (<function>zpu_interrupt()</function>). The zpu_interrupt routine will
      have to determine the IRQ cause by checking the SIC_IPEND
      register.</para>
    </note>

    <para>How the interrupt sources are mapped to the peripherals, is listed
    in the SoC specific section <xref linkend="app_custom"/>.</para>

    <important>
      <para>Keep in mind that the IMASK/IPEND/ILAT register represents the
      channel assignment, not the priority assignment (when you have changed
      the order using SIC_IAR).</para>
    </important>
  </section>

  <section>
    <title>Interrupt priorities</title>

    <para>Interrupt priorities are sorted out by the System Interrupt
    Controller (SIC). By default, all SIC implementations handle lower channel
    numbers with higher priority such that:</para>

    <itemizedlist>
      <listitem>
        <para>Simultaneous events on two channels will trigger the higher
        priority event and queue the lower priority request</para>
      </listitem>

      <listitem>
        <para>Higher priority events during a low prio service will cause an
        override action (more below)</para>
      </listitem>

      <listitem>
        <para>Lower priority events while another interrupt is in service will
        queue and execute after the current interrupt handler exits</para>
      </listitem>
    </itemizedlist>

    <para>The SIC will assert the override signal if it detects an event with
    higher priority than the one currently latched. The override signal clears
    the internal IRQ flag in the ZPUng core and therefore allows reentrancy.
    It may happen, that low priority interrupt requests during the high prio
    service are lost. If an interrupt of a specific channel had occured within
    a service routine can be determined by the SIC_IPEND register. It is
    therefore recommended to clear the corresponding SIC_IPEND_W1C flag at the
    <emphasis>beginning</emphasis> of the routine, if repeated IRQs during a
    service are expected.</para>

    <note>
      <para>Interrupt requests <emphasis>can</emphasis> get lost if several
      IRQ pulses occur during the service handler (with SIC_IPEND flag still
      set). If your software relies on a correct number of pulses, make sure
      to use peripheral controllers with hardware counters</para>
    </note>

    <para>When using the default SIC_IAR settings, IRQ priorities match the
    channel order [0..n-1]. </para>
  </section>
</section>
