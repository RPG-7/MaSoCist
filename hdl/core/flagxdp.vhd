-- File: flagxdp.vhd
-- Generated by MyHDL 0.9dev
-- Date: Thu Nov  1 11:11:33 2018


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_09.all;

entity flagxdp is
    port (
        reset: in std_logic;
        clki: in std_logic;
        datai: in std_logic;
        clko: in std_logic;
        datao: out std_logic
    );
end entity flagxdp;
-- Version with pulse derival (rising)

architecture MyHDL of flagxdp is





signal isig_d: std_logic;
signal sig: std_logic;
signal inst_flagx_toggle: std_logic;
signal inst_flagx_syncpipe: unsigned(2 downto 0);

begin




FLAGXDP_INST_FLAGX_IN_WORKER: process (clki) is
begin
    if rising_edge(clki) then
        if (reset = '1') then
            inst_flagx_toggle <= '0';
        else
            inst_flagx_toggle <= (inst_flagx_toggle xor sig);
        end if;
    end if;
end process FLAGXDP_INST_FLAGX_IN_WORKER;


FLAGXDP_INST_FLAGX_OUT_WORKER: process (clko) is
begin
    if rising_edge(clko) then
        inst_flagx_syncpipe <= unsigned'(inst_flagx_syncpipe(2-1 downto 0) & inst_flagx_toggle);
    end if;
end process FLAGXDP_INST_FLAGX_OUT_WORKER;



datao <= (inst_flagx_syncpipe(1) xor inst_flagx_syncpipe(2));


FLAGXDP_IN_WORKER: process (clki) is
begin
    if rising_edge(clki) then
        if (reset = '1') then
            isig_d <= '0';
        else
            isig_d <= datai;
        end if;
    end if;
end process FLAGXDP_IN_WORKER;



sig <= (datai and (not isig_d));

end architecture MyHDL;
