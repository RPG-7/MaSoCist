-- File generated by gensoc v0.20_dev
-- (c) 2012-2015, Martin Strubel <hackfin@section5.ch>
-- 
-- Changes to this file will be lost. Edit the source file.
-- 
-- LICENSE: Evaluation license. Not for commercial usage.
----------------------------------------------------------------------------
-- This VHDL package is generated from
-- /home/strubi/src/jtag/uniemu/tap/core_zpu.xml
-- Stylesheet: vhdlregs v0.1



library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Header:

package zputap is
	-- HW revision tag. Use in your code to sync with firmware.
	constant HWREV_zputap_MAJOR : natural := 0;
	constant HWREV_zputap_MINOR : natural := 0;
	constant HWREV_zputap_EXT   : string := "";

	subtype  regaddr_t is unsigned(7 downto 0);

	subtype  REG_SIZE1B is integer range 7 downto 0;
	subtype  REG_SIZE2B is integer range 15 downto 0;
	subtype  REG_SIZE3B is integer range 23 downto 0;
	subtype  REG_SIZE4B is integer range 31 downto 0;

	-- Register and bitfield constants:

-------------------------------------------------------------------------
-- Address segment 'ZPU'
--         Offset: 

-- These are the core specific bits of the EMUSTAT register
	constant R_ZPU_EMUSTAT           : regaddr_t := x"04";
-- Idim flag is set
	constant              B_ZPU_IDIM : natural := 15;
-- Hit and stopped by breakpoint instruction
	constant              B_ZPU_BREAK : natural := 14;
-- Set when IRQ was acknowledged
	constant              B_ZPU_IRQACK : natural := 13;
-- Set when IRQ latched
	constant              B_ZPU_IRQLAT : natural := 12;
-- Hit and stopped by breakpoint instruction
	constant              B_ZPU_IN_UCODE : natural := 11;
-- Exception condition raised
	constant              B_ZPU_EXCEPT : natural := 10;
-- Memory is busy
	constant              B_ZPU_MEMBUSY : natural := 9;
-- Core is being reset
	constant              B_ZPU_INRESET : natural := 8;

-------------------------------------------------------------------------
-- Address segment 'REG'
--         Offset: 

	constant R_REG_PC                : regaddr_t := x"00";
	constant R_REG_SP                : regaddr_t := x"01";

-- Special MMR node declarations:

	-- Access records:

	type zpuemu_ReadPort is record
		--! Exported value for register 'R_ZPU_EMUSTAT'
		--! Exported value for bit (vector) 'ZPU_IDIM'
		zpu_idim : std_logic;
		--! Exported value for bit (vector) 'ZPU_BREAK'
		zpu_break : std_logic;
		--! Exported value for bit (vector) 'ZPU_IRQACK'
		zpu_irqack : std_logic;
		--! Exported value for bit (vector) 'ZPU_IRQLAT'
		zpu_irqlat : std_logic;
		--! Exported value for bit (vector) 'ZPU_IN_UCODE'
		zpu_in_ucode : std_logic;
		--! Exported value for bit (vector) 'ZPU_EXCEPT'
		zpu_except : std_logic;
		--! Exported value for bit (vector) 'ZPU_MEMBUSY'
		zpu_membusy : std_logic;
		--! Exported value for bit (vector) 'ZPU_INRESET'
		zpu_inreset : std_logic;
	end record;

	type zpuemu_WritePort is record
		--! Exported value for register 'R_ZPU_EMUSTAT'
		--! Exported value for bit (vector) 'ZPU_IDIM'
		zpu_idim : std_logic;
		--! Exported value for bit (vector) 'ZPU_BREAK'
		zpu_break : std_logic;
		--! Exported value for bit (vector) 'ZPU_IRQACK'
		zpu_irqack : std_logic;
		--! Exported value for bit (vector) 'ZPU_IRQLAT'
		zpu_irqlat : std_logic;
		--! Exported value for bit (vector) 'ZPU_IN_UCODE'
		zpu_in_ucode : std_logic;
		--! Exported value for bit (vector) 'ZPU_EXCEPT'
		zpu_except : std_logic;
		--! Exported value for bit (vector) 'ZPU_MEMBUSY'
		zpu_membusy : std_logic;
		--! Exported value for bit (vector) 'ZPU_INRESET'
		zpu_inreset : std_logic;
	end record;

	type regs_ReadPort is record
		--! Exported value for register 'R_REG_PC'
		pc : std_logic_vector(REG_SIZE4B);
		--! Exported value for register 'R_REG_SP'
		sp : std_logic_vector(REG_SIZE4B);
	end record;

	type regs_WritePort is record
		--! Exported value for register 'R_REG_PC'
		pc : std_logic_vector(REG_SIZE4B);
		--! Exported value for register 'R_REG_SP'
		sp : std_logic_vector(REG_SIZE4B);
	end record;

	-- Register maps that explicitely have hidden="false"


end zputap;

